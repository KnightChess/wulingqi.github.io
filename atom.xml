<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KnightChess</title>
  
  <subtitle>The shortest answer is doing.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-24T16:58:33.578Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wu07</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>getResourceAsStream和getSystemResourceAsStream等获取配置文件的路径表示</title>
    <link href="http://yoursite.com/2018/03/25/pro-path/"/>
    <id>http://yoursite.com/2018/03/25/pro-path/</id>
    <published>2018-03-24T16:16:26.000Z</published>
    <updated>2018-03-24T16:58:33.578Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/properties.png" alt="我的项目包结构"></p><blockquote><p>解释下：包名下都有对应一样的配置文件名，方便确定配置文件的位置，测试类也一样，应该能马上看得出</p></blockquote><h2 id="1-相对路径"><a href="#1-相对路径" class="headerlink" title="1.相对路径"></a>1.相对路径</h2><p>根据我前面proper的几种读取方式中，只有<code>ClassName.class.getResourceAsStream</code>使用的才是相对路径。</p><table><thead><tr><th style="text-align:center">配置文件.properties</th><th style="text-align:right">path</th></tr></thead><tbody><tr><td style="text-align:center">kkk</td><td style="text-align:right">kkk/kkk.properties</td></tr><tr><td style="text-align:center">zzz</td><td style="text-align:right"><code>../../zzz/zzz.properties</code></td></tr><tr><td style="text-align:center">src</td><td style="text-align:right"><code>../../src.properties</code></td></tr></tbody></table><pre><code>1. kkk文件在与TestProperUtil同目录下的目录kkk下所以是kkk/文件2. zzz 文件是在Testxxx上上级也就是src目录下的zzz目录中，其中..是上一级目录的意思3. src是上上级目录下的文件</code></pre><hr><h2 id="2-src下的绝对路径，不包括src的使用方式有三种："><a href="#2-src下的绝对路径，不包括src的使用方式有三种：" class="headerlink" title="2. src下的绝对路径，不包括src的使用方式有三种："></a>2. src下的绝对路径，不包括src的使用方式有三种：</h2><ol><li><code>ClassLoadergetSystemResourceAsStream</code></li><li><code>ClassName.class.getClassLoader().getResourceAsStream</code></li><li><code>ResourceBundle.getBundle</code><blockquote><p>注意：getBundle那个路径文件不加后缀名</p></blockquote></li></ol><table><thead><tr><th style="text-align:center">配置文件.properties</th><th style="text-align:right">path</th></tr></thead><tbody><tr><td style="text-align:center">kkk</td><td style="text-align:right">properties/test/kkk/kkk.properties</td></tr><tr><td style="text-align:center">zzz</td><td style="text-align:right">zzz/zzz.properties</td></tr><tr><td style="text-align:center">prop</td><td style="text-align:right">properties/prop.properties</td></tr></tbody></table><pre><code>1. kkk在src目录下的properties中的test目录的kkk目录下，所以path是properties/test/kkk/kkk.properties2. zzz 同理</code></pre><h2 id="3-关于boot配置文件"><a href="#3-关于boot配置文件" class="headerlink" title="3.关于boot配置文件"></a>3.关于boot配置文件</h2><p>不知道怎么取得其配置，或者就取不到，希望有人告知，待更新</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/properties.png&quot; alt=&quot;我的项目包结构&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解释下：包名下都有对应一样的配置文件名，方便确定配置文件的位置，测试类也一样，应该能马上看得出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="properties" scheme="http://yoursite.com/tags/properties/"/>
    
  </entry>
  
  <entry>
    <title>加载properties配置文件的六种方式</title>
    <link href="http://yoursite.com/2018/03/23/sixWayLoadProperties/"/>
    <id>http://yoursite.com/2018/03/23/sixWayLoadProperties/</id>
    <published>2018-03-23T15:13:20.000Z</published>
    <updated>2018-03-25T01:31:29.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-是什么？"><a href="#1-是什么？" class="headerlink" title="1.是什么？"></a>1.是什么？</h2><h3 id="1-1定义"><a href="#1-1定义" class="headerlink" title="1.1定义"></a>1.1定义</h3><p>.properties是一种主要在java相关技术中用来存储应用程序的可配置参数的文件的文件扩展名。也可以存储用于国际化和本地化的字符串，这种文件被称为属性资源包。</p><h3 id="1-2内容与格式"><a href="#1-2内容与格式" class="headerlink" title="1.2内容与格式"></a>1.2内容与格式</h3><ol><li>简单来说是类似map的键-值对存储方式，类型都是String字符串。</li><li>语法有以下几种：<ul><li>以#和！号作为一行中的第一个字符表示注释</li><li>反斜杠()用于转义</li><li>键=值表示</li></ul></li></ol><h2 id="2-适用场合？优缺点，有无可替代对比？"><a href="#2-适用场合？优缺点，有无可替代对比？" class="headerlink" title="2.适用场合？优缺点，有无可替代对比？"></a>2.适用场合？优缺点，有无可替代对比？</h2><blockquote><p>java下常见的几种配置文件格式(在下资历少，只说三种)，其排序。<br>适合人类编写：properties &gt; yaml &gt; xml<br>可以存储数据的复杂度： xml &gt; yaml &gt; properties</p></blockquote><ol><li>.properties的优点怕是只有简单这一说法了，缺点就是因为其简单，所以不支持层级关系，而且其文件的编码是ISO-8859-1，又称Latin-1，导致没法加载中文。</li><li>xml: 从排序来看，xml是层次结构的，存储内容复杂，但是就拥有了强大的表达能力。缺点分析起来复杂，对人类不太友好，不易阅读，所以一般不是用来让人写的，而是机器间的自我生成和解析，比如javafx图形界面生成的xml文档。</li><li>yaml：替代xml。<blockquote><p><code>比xml好的地方有</code>：</p><ul><li>yaml可读性好</li><li>yaml和脚本语言的交互性好</li><li>yaml的语法和高级语言类似，进行简单表达</li><li>yaml有一个一致性的类型信息模型</li><li>yaml易于实现<br><code>yaml与xml相同的</code>：</li><li>yaml可以基于流来处理；</li><li>yaml表达能力强，存储的数据复杂度也高。</li></ul></blockquote></li></ol><h3 id="综上所述："><a href="#综上所述：" class="headerlink" title="综上所述："></a>综上所述：</h3><pre><code>机器间的生成和解析配置用xml可行，但是人为配置用yaml。</code></pre><h2 id="3-怎么用？"><a href="#3-怎么用？" class="headerlink" title="3.怎么用？"></a>3.怎么用？</h2><p><strong>下文的配置文件路径的具体表示点击</strong><a href="/2018/03/25/pro-path/index.html">跳转链接</a></p><p><img src="/images/properties.png" alt="这是我的项目结构"><br>先声明下全局变量<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String basePath = <span class="string">"src/properties/prop.properties"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String name = <span class="string">""</span>;</span><br></pre></td></tr></table></figure></p><h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><p>使用java.util.Properties类的load(InputStream)方法加载properties文件</p><blockquote><p>注意：这里的basepath是src目录开始的路径</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">try</span> (InputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(</span><br><span class="line">             <span class="keyword">new</span> File(basePath))))&#123;</span><br><span class="line">         Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">         pro.load(in);</span><br><span class="line">         name = pro.getProperty(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>  name;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><p>使用java.util.ResourceBundle类的getBudle()方法</p><blockquote><p>注意：这个getBundle()方法的参数只能写成包路径+properties文件名，否则将抛异常,并且路径是使用用src下的包名(不包括src)+文件名的方式 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">()</span></span>&#123;</span><br><span class="line">     ResourceBundle rb = ResourceBundle.getBundle(<span class="string">"properties/test/kkk/kkk"</span>);</span><br><span class="line">     name = rb.getString(<span class="string">"name"</span>);</span><br><span class="line">     <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><p>使用java.util.PropertyResourceBudle类的构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">try</span> (InputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(basePath))) &#123;</span><br><span class="line">         ResourceBundle rb = <span class="keyword">new</span> PropertyResourceBundle(in);</span><br><span class="line">         name = rb.getString(<span class="string">"name"</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h3><p>使用class变量的getResourceAsStream()方法注意：getResourceAsStream()方法的参数按格式写到包路径+properties文件名+.后缀</p><blockquote><p>注意：路径使用的是相对路径</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">     <span class="keyword">try</span> (InputStream in = TestProperUtil.class</span><br><span class="line">             .getResourceAsStream(<span class="string">"../../src.properties"</span>))&#123;</span><br><span class="line">         p.load(in);</span><br><span class="line">         name = p.getProperty(<span class="string">"name"</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-5"><a href="#3-5" class="headerlink" title="3.5"></a>3.5</h3><p>使用class.getClassLoader()所得到的java.lang.ClassLoader的getResourceAsStream()方法getResourceAsStream(name)方法的参数必须是包路径+文件名+.后缀否则会报空指针异常</p><blockquote><p>路径名和3.2一样</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> (InputStream in = TestProperUtil.class.getClassLoader()</span><br><span class="line">             .getResourceAsStream(<span class="string">"zzz/zzz.properties"</span>))&#123;</span><br><span class="line">         Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">         p.load(in);</span><br><span class="line">         name = p.getProperty(<span class="string">"name"</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-6"><a href="#3-6" class="headerlink" title="3.6"></a>3.6</h3><p>使用java.lang.ClassLoader类的getSystemResourceAsStream()静态方法getSystemResourceAsStream()方法的参数格式也是有固定要求的</p><blockquote><p>注意： 路径名和3.2一样的表示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> (InputStream in = ClassLoader</span><br><span class="line">             .getSystemResourceAsStream(<span class="string">"src.properties"</span>))&#123;</span><br><span class="line">         Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">         pro.load(in);</span><br><span class="line">         name = pro.getProperty(<span class="string">"name"</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-是什么？&quot;&gt;&lt;a href=&quot;#1-是什么？&quot; class=&quot;headerlink&quot; title=&quot;1.是什么？&quot;&gt;&lt;/a&gt;1.是什么？&lt;/h2&gt;&lt;h3 id=&quot;1-1定义&quot;&gt;&lt;a href=&quot;#1-1定义&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="配置文件" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>HexoMarkdown</title>
    <link href="http://yoursite.com/2018/03/22/WriteTest/"/>
    <id>http://yoursite.com/2018/03/22/WriteTest/</id>
    <published>2018-03-22T15:17:08.000Z</published>
    <updated>2018-03-24T02:19:54.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言：HexoMd-的语法，基本够用，欢迎补充-能用得到的-与修正，部分细节有待修改（基于主题BlueLake"><a href="#引言：HexoMd-的语法，基本够用，欢迎补充-能用得到的-与修正，部分细节有待修改（基于主题BlueLake" class="headerlink" title="引言：HexoMd 的语法，基本够用，欢迎补充(能用得到的)与修正，部分细节有待修改（基于主题BlueLake)"></a>引言：HexoMd 的语法，基本够用，欢迎补充(能用得到的)与修正，部分细节有待修改（基于主题BlueLake)</h2><p>Markdown 语法版本很多，不同地方部分语法不相兼容，导致网上部分语法不能再hexo上使用，以下是整理的能在hexo的部分语法。</p><hr><h2 id="1-Tab"><a href="#1-Tab" class="headerlink" title="1.Tab"></a>1.Tab</h2><pre><code>字前tab会加灰框</code></pre><h2 id="2-的用法"><a href="#2-的用法" class="headerlink" title="2.#的用法"></a>2.#的用法</h2><pre><code>用来表示几级标题# frist title## second title### third title</code></pre><h2 id="3-超链接"><a href="#3-超链接" class="headerlink" title="3.超链接"></a>3.超链接</h2><h3 id="3-1显示链接的图片"><a href="#3-1显示链接的图片" class="headerlink" title="3.1显示链接的图片"></a>3.1显示链接的图片</h3><pre><code>![name](url) 显示链接的图片![this is page](/images/keduoli.jpg)</code></pre><p>link:<br><img src="/images/keduoli.jpg" alt="this is page"></p><h3 id="3-2文字超链接"><a href="#3-2文字超链接" class="headerlink" title="3.2文字超链接"></a>3.2文字超链接</h3><pre><code>[name](url) 文字超链接[bilibili](https://www.bilibili.com/)</code></pre><p><a href="https://www.bilibili.com/" target="_blank" rel="noopener">bilibili</a></p><h3 id="3-3图片超链接"><a href="#3-3图片超链接" class="headerlink" title="3.3图片超链接"></a>3.3图片超链接</h3><pre><code>[![xxx](图片url)][要转移到的链接]图片超链接[![enene](/images/keduoli.jpg)](https://nodesource.com/products/nsolid)</code></pre><p><a href="https://nodesource.com/products/nsolid" target="_blank" rel="noopener"><img src="/images/keduoli.jpg" alt="enene"></a></p><h2 id="4-列表"><a href="#4-列表" class="headerlink" title="4.列表"></a>4.列表</h2><h3 id="4-1-1无序列表-，-，-，-两格缩进，列表与前一行的"><a href="#4-1-1无序列表-，-，-，-两格缩进，列表与前一行的" class="headerlink" title="4.1.1无序列表 -，*，+， 两格缩进，列表与前一行的"></a>4.1.1无序列表 -，*，+， 两格缩进，列表与前一行的</h3><pre><code>hello:      - one      - two      - three</code></pre><p>eg:</p><p>hello (没有衔接一起很神奇）</p><ul><li>one</li><li>two</li><li>three</li></ul><p>food</p><ul><li>bread<ul><li>apple<ul><li>pig<ul><li>ddd<ul><li>mmm</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="4-1-2两格缩进-（衔接在一起了）"><a href="#4-1-2两格缩进-（衔接在一起了）" class="headerlink" title="4.1.2两格缩进  （衔接在一起了）"></a>4.1.2两格缩进  （衔接在一起了）</h3><ol><li>登录微博开放平台，选择。</li><li>为了与注意风格统一，如下配置</li><li>嗯嗯嗯          （也衔接一起了）</li></ol><ul><li>基础设置： dsfs<ul><li>样式设置： sdfa</li><li>模块设置： dsfa</li></ul></li></ul><hr><h3 id="4-2有序列表-序号-xxx-注意有空格）"><a href="#4-2有序列表-序号-xxx-注意有空格）" class="headerlink" title="4.2有序列表 序号. xxx(注意有空格）"></a>4.2有序列表 序号. xxx(注意有空格）</h3><ol><li>登录微博开放平台，选择。</li><li>为了与注意风格统一，如下配置</li><li>嗯嗯嗯 </li></ol><h2 id="5-用键代替链接，键值对匹配"><a href="#5-用键代替链接，键值对匹配" class="headerlink" title="5.用键代替链接，键值对匹配"></a>5.用键代替链接，键值对匹配</h2><pre><code>关键字对上跳转的意思吧，[内容]和文章最后的[内容1](链接)对上可以变成超链接，前后内容忽略大小写，也能匹配。这里注意最后一个，如果最后几个字也要跳转，单单加[1]没用得再加[2]来达到目的，此时内容为1，但是跳转到的目的为2Markdown is a lightweight markup language based on theformatting conventions that people naturally use in email.  As [John Gruber] writes on the [Markdown site]</code></pre><p>Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email.As <a href="http://daringfireball.net" target="_blank" rel="noopener">John Gruber</a> writes on the <a href="https://github.com/joemccann/dillinger" target="_blank" rel="noopener">Markdown site</a></p><h2 id="6-可以用来注意，引用-可以多层"><a href="#6-可以用来注意，引用-可以多层" class="headerlink" title="6.可以用来注意，引用,可以多层"></a>6.可以用来注意，引用,可以多层</h2><pre><code>&gt; The overriding design goal for Markdown&apos;s&gt;&gt; formatting syntax is to make it as readable&gt; as possible. The idea is that.</code></pre><p>eg:</p><blockquote><p>The overriding design goal for Markdown’s</p><blockquote><p>formatting syntax is to make it as readable<br>as possible. The idea is that.</p></blockquote></blockquote><h2 id="7-代码块"><a href="#7-代码块" class="headerlink" title="7.代码块"></a>7.代码块</h2><pre><code>代码表示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> dillinger</span><br><span class="line">$ npm install -d</span><br><span class="line">$ node app</span><br></pre></td></tr></table></figure></code></pre><p>eg:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> dillinger</span><br><span class="line">$ npm install -d</span><br><span class="line">$ node app</span><br></pre></td></tr></table></figure></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args)&#123;</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"I think it's good"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-表格"><a href="#8-表格" class="headerlink" title="8.表格"></a>8.表格</h2><pre><code>制表第一行和第二行列必须对应数量相等| Plugin | README | sdflj || ------ | ：------： | -----： |  右对齐，居中，左对齐| Dropbox | [plugins/dropbox/README.md][PlDb] | dsf || Github | [plugins/github/README.md][PlGh] | sdf || Google Drive | [plugins/googledrive/README.md][PlGd] | dsfs || OneDrive | [plugins/onedrive/README.md][PlOd] | dsfj || Medium | [plugins/medium/README.md][PlMe] || Google Analytics | [plugins/googleanalytics/README.md][PlGa] |</code></pre><p>eg:</p><table><thead><tr><th>Plugin</th><th>README</th><th>sdflj</th></tr></thead><tbody><tr><td>Dropbox</td><td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/dropbox/README.md" target="_blank" rel="noopener">plugins/dropbox/README.md</a></td><td>dsf</td></tr><tr><td>Github</td><td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/github/README.md" target="_blank" rel="noopener">plugins/github/README.md</a></td><td>sdf</td></tr><tr><td>Google Drive</td><td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/googledrive/README.md" target="_blank" rel="noopener">plugins/googledrive/README.md</a></td><td>dsfs</td></tr><tr><td>OneDrive</td><td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/onedrive/README.md" target="_blank" rel="noopener">plugins/onedrive/README.md</a></td><td>dsfj</td></tr><tr><td>Medium</td><td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/medium/README.md" target="_blank" rel="noopener">plugins/medium/README.md</a></td><td>df</td></tr><tr><td>Google Analytics</td><td><a href="https://github.com/RahulHP/dillinger/blob/master/plugins/googleanalytics/README.md" target="_blank" rel="noopener">plugins/googleanalytics/README.md</a></td><td>dsdg</td></tr></tbody></table><p>eg：<br>This will create the dillinger image and pull in the necessary dependencies. Be sure to swap out <code>${package.json.version}</code> with the actual version of Dillinger.</p><h2 id="9-文字"><a href="#9-文字" class="headerlink" title="9.文字"></a>9.文字</h2><h3 id="9-1文字背景"><a href="#9-1文字背景" class="headerlink" title="9.1文字背景"></a>9.1文字背景</h3><pre><code>`xxx` 背景颜色加灰I love `you` red line</code></pre><p>eg:<br>I love <code>you</code> red line</p><h3 id="9-2文字加粗"><a href="#9-2文字加粗" class="headerlink" title="9.2文字加粗"></a>9.2文字加粗</h3><pre><code>加粗 **Software**</code></pre><p>Free <strong>Software</strong>, Hell Yeah!</p><h3 id="9-3删除线"><a href="#9-3删除线" class="headerlink" title="9.3删除线"></a>9.3删除线</h3><pre><code>~~xxx~~</code></pre><p>我喜欢<del>java</del>python</p><h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h2><pre><code>附录：[dill]: &lt;https://github.com/joemccann/dillinger&gt;[git-repo-url]: &lt;https://github.com/joemccann/dillinger.git&gt;[john gruber]: &lt;http://daringfireball.net&gt;[df1]: &lt;http://daringfireball.net/projects/markdown/&gt;[PlMe]: &lt;https://github.com/joemccann/dillinger/tree/master/plugins/medium/README.md&gt;[PlGa]: &lt;https://github.com/RahulHP/dillinger/blob/master/plugins/googleanalytics/README.md&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言：HexoMd-的语法，基本够用，欢迎补充-能用得到的-与修正，部分细节有待修改（基于主题BlueLake&quot;&gt;&lt;a href=&quot;#引言：HexoMd-的语法，基本够用，欢迎补充-能用得到的-与修正，部分细节有待修改（基于主题BlueLake&quot; class=&quot;h
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/22/hello-world/"/>
    <id>http://yoursite.com/2018/03/22/hello-world/</id>
    <published>2018-03-22T09:34:27.055Z</published>
    <updated>2018-03-22T09:34:27.056Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
