<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KnightChess</title>
  
  <subtitle>The shortest answer is doing.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-07T06:22:38.744Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wu07</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javaIO流的总结（更新中）</title>
    <link href="http://yoursite.com/2018/04/07/javaIO-summary/"/>
    <id>http://yoursite.com/2018/04/07/javaIO-summary/</id>
    <published>2018-04-07T14:11:28.000Z</published>
    <updated>2018-04-07T06:22:38.744Z</updated>
    
    <content type="html"><![CDATA[<p>引言：这里不会讲各种流的详细用法。</p><p><img src="/images/javaIO.png" alt="我的流结构"></p><blockquote><p>注意：original Stream（也称为节点流） 和 wrapper Stream（也称为处理流）未包装类和包装类。</p></blockquote><blockquote><p>java可分为输出流和输入流，根据流类型，可分为字符流和字节流，如下表：</p></blockquote><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:center">字节流</th><th>字符流</th></tr></thead><tbody><tr><td style="text-align:center">输入流</td><td style="text-align:center">InputStream</td><td>Reader</td></tr><tr><td style="text-align:center">输出流</td><td style="text-align:center">OutputStream</td><td>Writer</td></tr></tbody></table><blockquote><p>实际使用中我们一般不会用到上面说的四类，而是使用继承它们的子类，不同的子类负责着不同的功能，以便于我开发不同的应用。<br>用途主要有以下几种：</p></blockquote><ul><li>文件访问</li><li>网络访问</li><li>内存缓存访问</li><li>线程内部通信</li><li>缓冲</li><li>过滤</li><li>解析</li><li>读写文本，基本数据类型，对象</li></ul><h3 id="Java-IO-类概述表"><a href="#Java-IO-类概述表" class="headerlink" title="Java IO 类概述表"></a>Java IO 类概述表</h3><p><img src="/images/IO.png" alt=""></p><blockquote><p>该表使用自并发编程网的<a href="http://ifeve.com/java-io-3/" target="_blank" rel="noopener">javaIO</a></p></blockquote><blockquote><p>各做基类流继承下去的分为两类，节点的流和处理流：<br>字节节点流只具有读取字节内容的方法，比如FileInputStream流和FileOutputStream流只能向文件中读取或者向文件中写入字节，对于各种类型的数据，如果是写入文件，必须转换成字节数组后写入文件，若是读取，那么就得转换成相应的类型。 而处理流，例如DataOutputStream提供了各种对象中写入类型的方法，方便编程人员。</p></blockquote><h2 id="1-字节流"><a href="#1-字节流" class="headerlink" title="1. 字节流"></a>1. 字节流</h2><h3 id="1-1-InputStream作为基类"><a href="#1-1-InputStream作为基类" class="headerlink" title="1.1 InputStream作为基类"></a>1.1 InputStream作为基类</h3><h4 id="1-1-1-ByteArrayInputStream"><a href="#1-1-1-ByteArrayInputStream" class="headerlink" title="1.1.1 ByteArrayInputStream"></a>1.1.1 ByteArrayInputStream</h4><blockquote><p>内部通过建立字节数组buf缓冲区来读取保存数据</p></blockquote><p>适用场景:<br>此流是内存操作流，这个流可实现类似内存虚拟文件的功能，将数据暂存在缓存区中，可以使程序不需要产生相应的临时文件，避免从存储介质上读取，提升效率。</p><p>注意:<br>此流没有提供close关闭流的操作，当没有对其的强引用时，就会自动被GC，但是也会导致内存溢出，可以使用org.apache.commons.io.IoUtiles关闭流</p><h4 id="1-1-2-FileInputStream"><a href="#1-1-2-FileInputStream" class="headerlink" title="1.1.2 FileInputStream"></a>1.1.2 FileInputStream</h4><blockquote><p>把一个文件作为文件输入流，实现对文件的读取操作，访问硬盘</p></blockquote><p>适用场景:<br>从名字上就能看出应用，对硬盘上的文件的存取</p><h4 id="1-1-3-SocketInputStream"><a href="#1-1-3-SocketInputStream" class="headerlink" title="1.1.3 SocketInputStream"></a>1.1.3 SocketInputStream</h4><blockquote><p>就和名字一样，适用于网络通信中。</p></blockquote><h4 id="1-1-4-PipeInputStream"><a href="#1-1-4-PipeInputStream" class="headerlink" title="1.1.4 PipeInputStream"></a>1.1.4 PipeInputStream</h4><blockquote><p>通多创建管道实现线程间的通信</p></blockquote><h4 id="1-1-5-BufferedInputStream"><a href="#1-1-5-BufferedInputStream" class="headerlink" title="1.1.5 BufferedInputStream"></a>1.1.5 BufferedInputStream</h4><blockquote><p>本质是通过一个内部缓冲数组实现的，默认大小8192，实现滑动读取的功能，事先把size大小的数据从磁盘中读取到缓冲区上，然后实际操作都在缓冲区中进行，如果数据超过缓冲区，那么将重新载入数据。减少了磁盘IO，提高了效率。</p></blockquote><p>用途：<br>因为其缓存的功能，可以起到改善效率的作用。通过源码可以看出，构造器的形参是InputStream，所以可以对其进行改善效率，包括FileInputStream等，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"zzz.txt"</span>));</span><br></pre></td></tr></table></figure><h4 id="1-1-6-DataInputStream"><a href="#1-1-6-DataInputStream" class="headerlink" title="1.1.6 DataInputStream"></a>1.1.6 DataInputStream</h4><blockquote><p>封装了对字节流的解析，实现了对基本数据类型的基本操作和对读取UTF格式的方法，当然，读取字符的还有Rread等相关的字符流。</p></blockquote><h4 id="1-1-7-PushbackInputStream"><a href="#1-1-7-PushbackInputStream" class="headerlink" title="1.1.7 PushbackInputStream"></a>1.1.7 PushbackInputStream</h4><blockquote><p>回推流，把从缓存区中读出来的数据再原路推回去，没有破坏输入流里的内容结构。</p></blockquote><p>注意：<br>PushbackInputStream对象会使得InputStream对象（用于创建PushbackInputStream对象）的mark()或reset()方法无效。对于准备使用mark()或reset()方法的任何流来说，都应当使用markSupported()方法进行检查。</p><h4 id="1-1-8-ObjectInputStream与ObjectOutputStream"><a href="#1-1-8-ObjectInputStream与ObjectOutputStream" class="headerlink" title="1.1.8 ObjectInputStream与ObjectOutputStream"></a>1.1.8 ObjectInputStream与ObjectOutputStream</h4><blockquote><p>ObjectOutputStream 将 Java 对象的基本数据类型和图形写入 OutputStream。可以使用 ObjectInputStream 读取（重构）对象。通过在流中使用文件可以实现对象的持久存储。如果流是网络套接字流，则可以在另一台主机上或另一个进程中重构对象。<br>只能将支持 java.io.Serializable 接口的对象写入流中。每个 serializable 对象的类都被编码，编码内容包括类名和类签名、对象的字段值和数组值，以及从初始对象中引用的其他所有对象的闭包。<br>writeObject 方法用于将对象写入流中。所有对象（包括 String 和数组）都可以通过 writeObject 写入。可将多个对象或基元写入流中。必须使用与写入对象时相同的类型和顺序从相应 ObjectInputstream 中读回对象。</p></blockquote><h4 id="1-1-9-SequenceInputStream"><a href="#1-1-9-SequenceInputStream" class="headerlink" title="1.1.9 SequenceInputStream"></a>1.1.9 SequenceInputStream</h4><blockquote><p>合并流，将多个源合并成一个源</p></blockquote><h3 id="1-2-OutputStream作为基类"><a href="#1-2-OutputStream作为基类" class="headerlink" title="1.2 OutputStream作为基类"></a>1.2 OutputStream作为基类</h3><h4 id="1-2-1-PrintStream"><a href="#1-2-1-PrintStream" class="headerlink" title="1.2.1 PrintStream"></a>1.2.1 PrintStream</h4><blockquote><p>PrintStream 是打印输出流，它继承于FilterOutputStream。<br>PrintStream 是用来装饰其它输出流。它能为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。<br>与其他输出流不同，PrintStream 永远不会抛出 IOException；它产生的IOException会被自身的函数所捕获并设置错误标记， 用户可以通过 checkError() 返回错误标记，从而查看PrintStream内部是否产生了IOException。<br>另外，PrintStream 提供了自动flush 和 字符集设置功能。所谓自动flush，就是往PrintStream写入的数据会立刻调用flush()函数。</p></blockquote><h4 id="这里对比一下PrintStream和DataOutputStream（原文链接"><a href="#这里对比一下PrintStream和DataOutputStream（原文链接" class="headerlink" title="这里对比一下PrintStream和DataOutputStream（原文链接)"></a>这里对比一下PrintStream和DataOutputStream（<a href="https://www.cnblogs.com/skywang12345/p/io_16.html" target="_blank" rel="noopener">原文链接</a>)</h4><p>相同点：都是继承与FileOutputStream，用于包装其它输出流。<br>不同点：</p><p>(01) PrintStream和DataOutputStream 都可以将数据格式化输出；但它们在“输出字符串”时的编码不同。</p><blockquote><p>PrintStream是输出时采用的是用户指定的编码(创建PrintStream时指定的)，若没有指定，则采用系统默认的字符编码。而DataOutputStream则采用的是UTF-8。<br>关于UTF-8的字符编码可以参考“字符编码(ASCII，Unicode和UTF-8) 和 大小端”<br>关于DataOutputStream的更多内容，可以参考“java io系列15之 DataOutputStream(数据输出流)的认知、源码和示例”</p></blockquote><p>(02) 它们的写入数据时的异常处理机制不同。</p><blockquote><p>DataOutputStream在通过write()向“输出流”中写入数据时，若产生IOException，会抛出。<br>而PrintStream在通过write()向“输出流”中写入数据时，若产生IOException，则会在write()中进行捕获处理；并设置trouble标记(用于表示产生了异常)为true。用户可以通过checkError()返回trouble值，从而检查输出流中是否产生了异常。</p></blockquote><p>(03) 构造函数不同</p><blockquote><p>DataOutputStream的构造函数只有一个：DataOutputStream(OutputStream out)。即它只支持以输出流out作为“DataOutputStream的输出流”。<br>而PrintStream的构造函数有许多：和DataOutputStream一样，支持以输出流out作为“PrintStream输出流”的构造函数；还支持以“File对象”或者“String类型的文件名对象”的构造函数。<br>而且，在PrintStream的构造函数中，能“指定字符集”和“是否支持自动flush()操作”。</p></blockquote><p>(04) 目的不同</p><blockquote><p>DataOutputStream的作用是装饰其它的输出流，它和DataInputStream配合使用：允许应用程序以与机器无关的方式从底层输入流中读写java数据类型。<br>而PrintStream的作用虽然也是装饰其他输出流，但是它的目的不是以与机器无关的方式从底层读写java数据类型；而是为其它输出流提供打印各种数据值表示形式，使其它输出流能方便的通过print(), println()或printf()等输出各种格式的数据。</p></blockquote><h2 id="2-字符流"><a href="#2-字符流" class="headerlink" title="2. 字符流"></a>2. 字符流</h2><h3 id="2-1-Reader作为基类"><a href="#2-1-Reader作为基类" class="headerlink" title="2.1 Reader作为基类"></a>2.1 Reader作为基类</h3><h4 id="2-1-1-CharArrayReader"><a href="#2-1-1-CharArrayReader" class="headerlink" title="2.1.1 CharArrayReader"></a>2.1.1 CharArrayReader</h4><h4 id="2-1-2-InputStreamReader"><a href="#2-1-2-InputStreamReader" class="headerlink" title="2.1.2 InputStreamReader"></a>2.1.2 InputStreamReader</h4><h4 id="2-1-3-FileReader"><a href="#2-1-3-FileReader" class="headerlink" title="2.1.3 FileReader"></a>2.1.3 FileReader</h4><h4 id="2-1-4-PipedReader"><a href="#2-1-4-PipedReader" class="headerlink" title="2.1.4 PipedReader"></a>2.1.4 PipedReader</h4><h4 id="2-1-5-StringReader"><a href="#2-1-5-StringReader" class="headerlink" title="2.1.5 StringReader"></a>2.1.5 StringReader</h4><h4 id="2-1-6-BufferedReader"><a href="#2-1-6-BufferedReader" class="headerlink" title="2.1.6 BufferedReader"></a>2.1.6 BufferedReader</h4><h4 id="2-1-7-LinNumberReader"><a href="#2-1-7-LinNumberReader" class="headerlink" title="2.1.7 LinNumberReader"></a>2.1.7 LinNumberReader</h4><h4 id="2-1-8-PushBackReader"><a href="#2-1-8-PushBackReader" class="headerlink" title="2.1.8 PushBackReader"></a>2.1.8 PushBackReader</h4><h3 id="2-2-Writer作为基类"><a href="#2-2-Writer作为基类" class="headerlink" title="2.2 Writer作为基类"></a>2.2 Writer作为基类</h3><h4 id="2-2-1-PrintWriter"><a href="#2-2-1-PrintWriter" class="headerlink" title="2.2.1 PrintWriter"></a>2.2.1 PrintWriter</h4><h2 id="3-RandomAccessFile"><a href="#3-RandomAccessFile" class="headerlink" title="3. RandomAccessFile"></a>3. RandomAccessFile</h2><h2 id="4-字符和字节流的转换"><a href="#4-字符和字节流的转换" class="headerlink" title="4. 字符和字节流的转换"></a>4. 字符和字节流的转换</h2><h2 id="5-一般使用规则-输入和输出类似"><a href="#5-一般使用规则-输入和输出类似" class="headerlink" title="5.一般使用规则(输入和输出类似)"></a>5.一般使用规则(输入和输出类似)</h2><p>1.按数据来源分类：</p><ul><li>文件：FileInputStream, FileReader</li><li>byte[]: ByteArrayInputStream</li><li>char[]: CharArrayReader</li><li>String: StringBufferInputStream, StringReader</li><li>网络数据流: InputStream, Reader</li></ul><p>2.按是否格式化输出</p><ul><li>格式化输出： PrintStream, PrintWriter</li></ul><p>3.按是否要缓冲</p><ul><li>BufferedInputStream, BufferedReader</li></ul><p>4.按数据格式：</p><ul><li>字节流： InputStream和OutputStream以及它们的子类</li><li>字符流： Reader和Writer以及它们的子类</li></ul><p>5.按输入输出：</p><ul><li>不用写，都懂</li></ul><p>6.特别的：</p><ul><li>Stream到Reader和Writer的转换类： InputStreamReader和OutputStreamWriter</li><li>对象输入输出： ObjectStream, ObjectStream</li><li>进程通信： PipeInputStream, PipeReader</li><li>合并输入： SequenceInputStream</li><li>其它： PushbackInputStream, PushbackReader, LineNumberInputStream, LineNumberReader</li></ul><h2 id="6-构造准则"><a href="#6-构造准则" class="headerlink" title="6. 构造准则"></a>6. 构造准则</h2><pre><code>决定使用哪个类以及它的构造进程的一般准则如下（不考虑特殊需要）：首先，考虑最原始的数据格式是什么： 原则四第二，是输入还是输出：原则五第三，是否需要转换流：原则六第 1 点第四，数据来源（去向）是什么：原则一第五，是否要缓冲：原则三 （特别注明：一定要注意的是 readLine() 是否有定义，有什么比 read, write 更特殊的输入或输出方法）第六，是否要格式化输出：原则二</code></pre><p>借鉴<a href="http://yuanzhitofaraway.lofter.com/post/2b181d_aac8fcf" target="_blank" rel="noopener">远志，志在远方</a></p><p>【1】内存操作流： 用于处理临时存储的信息，程序结束，数据就从内存中消失。</p><ul><li>字节数组：</li><li>ByteArrayInputStream</li><li><p>ByteArrayOutputStream</p></li><li><p>字符数组：</p></li><li>CharArrayReader</li><li><p>CharArrayWriter</p></li><li><p>字符串：</p></li><li>StringReader</li><li>StringWriter</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引言：这里不会讲各种流的详细用法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/javaIO.png&quot; alt=&quot;我的流结构&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：original Stream（也称为节点流） 和 wrapper Stream（也称为处理
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="IO" scheme="http://yoursite.com/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>java中自动拆装箱的一些问题</title>
    <link href="http://yoursite.com/2018/04/05/auto-unpacking-packing/"/>
    <id>http://yoursite.com/2018/04/05/auto-unpacking-packing/</id>
    <published>2018-04-05T07:08:41.000Z</published>
    <updated>2018-04-07T03:36:30.815Z</updated>
    
    <content type="html"><![CDATA[<p>引言： 直接进入正题，我就当大家都知道什么是拆箱和装箱了，这里主要讨论的是不清楚原理导致产生一些奇怪问题的内容，想看详细介绍的跳到这边：<a href="http://www.cnblogs.com/dolphin0520/p/3780005.html" target="_blank" rel="noopener">深入剖析java中的装箱和拆箱</a>，这边感谢原作者对反编译class文件的解析，让我理解原理，下面会使用原作者的部分内容以及讲解一些原作者没解析的一些内容。</p><h2 id="1-拆箱和装箱时如何实现的"><a href="#1-拆箱和装箱时如何实现的" class="headerlink" title="1. 拆箱和装箱时如何实现的"></a>1. 拆箱和装箱时如何实现的</h2><blockquote><p>通过反编译的文件可以了解到，装箱时自动调用的是valueif()方法，而拆箱的时候自动调用的是xxxValue()方法。</p></blockquote><h2 id="2-遇到的相关问题"><a href="#2-遇到的相关问题" class="headerlink" title="2. 遇到的相关问题"></a>2. 遇到的相关问题</h2><h3 id="2-1-看下面的代码"><a href="#2-1-看下面的代码" class="headerlink" title="2.1 看下面的代码"></a>2.1 看下面的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        Integer i1 = <span class="number">100</span>;</span><br><span class="line">        Integer i2 = <span class="number">100</span>;</span><br><span class="line">        Integer i3 = <span class="number">200</span>;</span><br><span class="line">        Integer i4 = <span class="number">200</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(i1==i2);</span><br><span class="line">        System.out.println(i3==i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>结果是：truefalse</code></pre><blockquote><p>神奇吧，出乎意料，以前没有深入了解，有人提到后就去分析了源码，看看Integer valueOf的部分源码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Integer.java</span><br><span class="line"></span><br><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过源码的实现可以看出，有IntegerCache类参与，其实是Integer的一个内部类，源码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Integer.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="comment">// high value may be configured by property</span></span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">            String integerCacheHighPropValue =</span><br><span class="line">                VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                    i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                    <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            high = h;</span><br><span class="line"></span><br><span class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过源码可以看出，通过valueOf方法创建Integer对象，如果数值在-128到127之间，直接返回IntegerCache中存在的引用，否则返回新的对象，就能解释true和false的问题了。</p></blockquote><h3 id="2-2-那么再来看一个问题"><a href="#2-2-那么再来看一个问题" class="headerlink" title="2.2 那么再来看一个问题"></a>2.2 那么再来看一个问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        Double i1 = <span class="number">100.0</span>;</span><br><span class="line">        Double i2 = <span class="number">100.0</span>;</span><br><span class="line">        Double i3 = <span class="number">200.0</span>;</span><br><span class="line">        Double i4 = <span class="number">200.0</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(i1==i2);</span><br><span class="line">        System.out.println(i3==i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>结果是：falsefalse</code></pre><blockquote><p>又错了吧，应该好好再看看源码的，可恶，没错Double类的valueOf源码的实现和Integet不一样，这里就不贴源码了，看的真心疼，大佬们的代码能力真的是很强。回到问题，源码中Double并没有像Integer那个有规定cache数组等相关的操作，大概我们能使用到double的地方的话代表精度很大，没必要吧，所以Double每次的装箱都是返回新的对象。</p></blockquote><p><code>总结下： Integer，Short，Byte，Character，Long这几个类的valueOf类似，Double，Float的类似</code></p><h3 id="2-3-这里原作者还提到了boolean变量，看例子"><a href="#2-3-这里原作者还提到了boolean变量，看例子" class="headerlink" title="2.3 这里原作者还提到了boolean变量，看例子"></a>2.3 这里原作者还提到了boolean变量，看例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        Boolean i1 = <span class="keyword">false</span>;</span><br><span class="line">        Boolean i2 = <span class="keyword">false</span>;</span><br><span class="line">        Boolean i3 = <span class="keyword">true</span>;</span><br><span class="line">        Boolean i4 = <span class="keyword">true</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(i1==i2);</span><br><span class="line">        System.out.println(i3==i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><blockquote><p>通过源码可以很直接的看出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Boolean.java</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>emememem，很简单直观，看看True和False</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Boolean.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean TRUE = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean FALSE = <span class="keyword">new</span> Boolean(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><blockquote><p>可以看出，是类成员属性</p></blockquote><h3 id="2-4-Integer-i-new-Integer-xxx-和Integer-i-xxx-这两种方式的区别。（没错，这里copy原文）"><a href="#2-4-Integer-i-new-Integer-xxx-和Integer-i-xxx-这两种方式的区别。（没错，这里copy原文）" class="headerlink" title="2.4 Integer i = new Integer(xxx)和Integer i =xxx;这两种方式的区别。（没错，这里copy原文）"></a>2.4 Integer i = new Integer(xxx)和Integer i =xxx;这两种方式的区别。（没错，这里copy原文）</h3><p>当然，这个题目属于比较宽泛类型的。但是要点一定要答上，我总结一下主要有以下这两点区别：</p><ol><li>第一种方式不会触发自动装箱的过程；而第二种方式会触发；</li><li>在执行效率和资源占用上的区别。第二种方式的执行效率和资源占用在一般性情况下要优于第一种情况（注意这并不是绝对的）。</li></ol><h3 id="2-5-看下面完整的例子"><a href="#2-5-看下面完整的例子" class="headerlink" title="2.5 看下面完整的例子"></a>2.5 看下面完整的例子</h3><p>这里就当做读者都了解 == 和 equals 的区别了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用原作者的例子强行解释</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        Integer a = <span class="number">1</span>;</span><br><span class="line">        Integer b = <span class="number">2</span>;</span><br><span class="line">        Integer c = <span class="number">3</span>;</span><br><span class="line">        Integer d = <span class="number">3</span>;</span><br><span class="line">        Integer e = <span class="number">321</span>;</span><br><span class="line">        Integer f = <span class="number">321</span>;</span><br><span class="line">        Long g = <span class="number">3L</span>;</span><br><span class="line">        Long h = <span class="number">2L</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(c==d);          <span class="comment">//1.true </span></span><br><span class="line">        System.out.println(e==f);          <span class="comment">//2.false</span></span><br><span class="line">        System.out.println(c==(a+b));      <span class="comment">//3.true</span></span><br><span class="line">        System.out.println(c.equals(a+b)); <span class="comment">//4.true</span></span><br><span class="line">        System.out.println(g==(a+b));      <span class="comment">//5.true</span></span><br><span class="line">        System.out.println(g.equals(a+b)); <span class="comment">//6.false</span></span><br><span class="line">        System.out.println(g.equals(a+h)); <span class="comment">//7.true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里挑几点讲解</p><ol><li>第3点，1+2触发自动拆箱，和c比较的是数值是否相等</li><li>第4点，a+b先触发拆箱求和后再触发装箱，调用valueOf方法</li><li>这里对比第6点和第7点：a+b通过拆装箱最后还是Integer类型，g调用的是Long类型的equals，看下面的源码，先比较的是类型，由于类型不对，所以false；这里看看第7点，h是long类型，所以a+b会隐式转换成long的类型，与g类型相同。</li></ol></blockquote><p>相关类型的的equals源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Integer.java</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">            <span class="keyword">return</span> value == ((Integer)obj).intValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Long.java</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Long) &#123;</span><br><span class="line">            <span class="keyword">return</span> value == ((Long)obj).longValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引言： 直接进入正题，我就当大家都知道什么是拆箱和装箱了，这里主要讨论的是不清楚原理导致产生一些奇怪问题的内容，想看详细介绍的跳到这边：&lt;a href=&quot;http://www.cnblogs.com/dolphin0520/p/3780005.html&quot; target=&quot;_
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>关于java.lang.UnsupportedOperationException异常</title>
    <link href="http://yoursite.com/2018/04/05/asListException/"/>
    <id>http://yoursite.com/2018/04/05/asListException/</id>
    <published>2018-04-05T03:37:56.000Z</published>
    <updated>2018-04-05T07:01:37.834Z</updated>
    
    <content type="html"><![CDATA[<p>引言： 这里感谢我们的组长提出这个问题，然后我去查看源码后发现了导致这个问题的原因。</p><h2 id="1-是什么，原因"><a href="#1-是什么，原因" class="headerlink" title="1. 是什么，原因"></a>1. 是什么，原因</h2><p>在调用Arrays类的aslist函数把数组转换成List集合不能对其进行添加删除等操作，否则抛出UnsupportedOperationException的异常，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">zzz.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zzz</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(arr);</span><br><span class="line">        list.add(<span class="number">3</span>);  <span class="comment">//error</span></span><br><span class="line">        list.remove(<span class="number">2</span>);  <span class="comment">//error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码将抛出一下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.UnsupportedOperationException</span><br><span class="line">at java.base/java.util.AbstractList.add(AbstractList.java:<span class="number">153</span>)</span><br><span class="line">at java.base/java.util.AbstractList.add(AbstractList.java:<span class="number">111</span>)</span><br><span class="line">at Test.zzz.main(zzz.java:<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>根据字面意思，unsupportedOperationException就是对该实例不支持相应的函数操作。</p><blockquote><p>也许有人问，list接口明明提供相应的接口，并且ArrayList明明实现了add等操作函数，为什么不支持。问题就在这，aslist返回的ArrayList实例并不是我们之前学的Arraylist的实例，而是Arrays类的静态内部类的实例，看源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arrays.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(a);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>asList的源码，跟踪ArrayList的创建方法，继续看源码。只需要注意继承和实现类和接口还有实现的相关函数，直接跳到解析部分：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">Arrays.java</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span> include</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2764017481108945198L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> E[] a;</span><br><span class="line"></span><br><span class="line">        ArrayList(E[] array) &#123;</span><br><span class="line">            a = Objects.requireNonNull(array);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.copyOf(a, a.length, Object[].class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = size();</span><br><span class="line">            <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">                <span class="keyword">return</span> Arrays.copyOf(<span class="keyword">this</span>.a, size,</span><br><span class="line">                                     (Class&lt;? extends T[]&gt;) a.getClass());</span><br><span class="line">            System.arraycopy(<span class="keyword">this</span>.a, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">            <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">                a[size] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a[index];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">            E oldValue = a[index];</span><br><span class="line">            a[index] = element;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            E[] a = <span class="keyword">this</span>.a;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">                    <span class="keyword">if</span> (a[i] == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">                    <span class="keyword">if</span> (o.equals(a[i]))</span><br><span class="line">                        <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterators.spliterator(a, Spliterator.ORDERED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(action);</span><br><span class="line">            <span class="keyword">for</span> (E e : a) &#123;</span><br><span class="line">                action.accept(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(operator);</span><br><span class="line">            E[] a = <span class="keyword">this</span>.a;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">                a[i] = operator.apply(a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">            Arrays.sort(a, c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayItr&lt;&gt;(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayItr</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> cursor;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> E[] a;</span><br><span class="line"></span><br><span class="line">        ArrayItr(E[] a) &#123;</span><br><span class="line">            <span class="keyword">this</span>.a = a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor &lt; a.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= a.length) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            &#125;</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用的是Arrays.java内部类的构造方法ArrayList，然而这个静态内部类并没有实现add等相关的方法，怀着好奇心，继续研究源码，发现这个内部类并没有直接实现List接口，而是通过继承AbstractList<e>来间接实现List接口，我们来看看AbstractList的add和remove源码部分：</e></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AbstractList.java</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>真相大白有没有，Arrays的静态内部类ArrayList并没有改写从AbstractList继承的源码，那么调用add和remove等相关函数时，就会调用AbstractList实现的相关方法，然而内容只有抛出异常，没有其它相关的实现操作。</p></blockquote><h2 id="2-那么如何操作转换呢"><a href="#2-那么如何操作转换呢" class="headerlink" title="2. 那么如何操作转换呢"></a>2. 那么如何操作转换呢</h2><p>我这里知道的有两种，欢迎━(<em>｀∀´</em>)ノ亻!补充</p><ol><li>使用Iterator迭代器，迭代访问赋值</li><li>直接使用new ArrayList(Collection&lt;? extends E&gt; c)构造方法，这里注意，ArrayList并没有提供集合以外的参数构造，所以一开始的Integer类型的数组老老实实的迭代添加吧(偷笑), 为什么迭代器，而不是for， get来，效率问题，谷歌去。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>asList调用的是Arrays.java的静态内部类的构造方法，然而那个方法并没有实现add等相关修改数量大小的方法，也许这就是他们想要的目的，但是内容还是能通过set修改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引言： 这里感谢我们的组长提出这个问题，然后我去查看源码后发现了导致这个问题的原因。&lt;/p&gt;
&lt;h2 id=&quot;1-是什么，原因&quot;&gt;&lt;a href=&quot;#1-是什么，原因&quot; class=&quot;headerlink&quot; title=&quot;1. 是什么，原因&quot;&gt;&lt;/a&gt;1. 是什么，原因&lt;/
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>getResourceAsStream和getSystemResourceAsStream等获取配置文件的路径表示</title>
    <link href="http://yoursite.com/2018/03/25/pro-path/"/>
    <id>http://yoursite.com/2018/03/25/pro-path/</id>
    <published>2018-03-24T16:16:26.000Z</published>
    <updated>2018-03-24T16:58:33.578Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/properties.png" alt="我的项目包结构"></p><blockquote><p>解释下：包名下都有对应一样的配置文件名，方便确定配置文件的位置，测试类也一样，应该能马上看得出</p></blockquote><h2 id="1-相对路径"><a href="#1-相对路径" class="headerlink" title="1.相对路径"></a>1.相对路径</h2><p>根据我前面proper的几种读取方式中，只有<code>ClassName.class.getResourceAsStream</code>使用的才是相对路径。</p><table><thead><tr><th style="text-align:center">配置文件.properties</th><th style="text-align:right">path</th></tr></thead><tbody><tr><td style="text-align:center">kkk</td><td style="text-align:right">kkk/kkk.properties</td></tr><tr><td style="text-align:center">zzz</td><td style="text-align:right"><code>../../zzz/zzz.properties</code></td></tr><tr><td style="text-align:center">src</td><td style="text-align:right"><code>../../src.properties</code></td></tr></tbody></table><pre><code>1. kkk文件在与TestProperUtil同目录下的目录kkk下所以是kkk/文件2. zzz 文件是在Testxxx上上级也就是src目录下的zzz目录中，其中..是上一级目录的意思3. src是上上级目录下的文件</code></pre><hr><h2 id="2-src下的绝对路径，不包括src的使用方式有三种："><a href="#2-src下的绝对路径，不包括src的使用方式有三种：" class="headerlink" title="2. src下的绝对路径，不包括src的使用方式有三种："></a>2. src下的绝对路径，不包括src的使用方式有三种：</h2><ol><li><code>ClassLoadergetSystemResourceAsStream</code></li><li><code>ClassName.class.getClassLoader().getResourceAsStream</code></li><li><code>ResourceBundle.getBundle</code><blockquote><p>注意：getBundle那个路径文件不加后缀名</p></blockquote></li></ol><table><thead><tr><th style="text-align:center">配置文件.properties</th><th style="text-align:right">path</th></tr></thead><tbody><tr><td style="text-align:center">kkk</td><td style="text-align:right">properties/test/kkk/kkk.properties</td></tr><tr><td style="text-align:center">zzz</td><td style="text-align:right">zzz/zzz.properties</td></tr><tr><td style="text-align:center">prop</td><td style="text-align:right">properties/prop.properties</td></tr></tbody></table><pre><code>1. kkk在src目录下的properties中的test目录的kkk目录下，所以path是properties/test/kkk/kkk.properties2. zzz 同理</code></pre><h2 id="3-关于boot配置文件"><a href="#3-关于boot配置文件" class="headerlink" title="3.关于boot配置文件"></a>3.关于boot配置文件</h2><p>不知道怎么取得其配置，或者就取不到，希望有人告知，待更新</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/properties.png&quot; alt=&quot;我的项目包结构&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解释下：包名下都有对应一样的配置文件名，方便确定配置文件的位置，测试类也一样，应该能马上看得出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="properties" scheme="http://yoursite.com/tags/properties/"/>
    
  </entry>
  
  <entry>
    <title>加载properties配置文件的六种方式</title>
    <link href="http://yoursite.com/2018/03/23/sixWayLoadProperties/"/>
    <id>http://yoursite.com/2018/03/23/sixWayLoadProperties/</id>
    <published>2018-03-23T15:13:20.000Z</published>
    <updated>2018-03-25T03:05:07.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-是什么？"><a href="#1-是什么？" class="headerlink" title="1.是什么？"></a>1.是什么？</h2><h3 id="1-1定义"><a href="#1-1定义" class="headerlink" title="1.1定义"></a>1.1定义</h3><p>.properties是一种主要在java相关技术中用来存储应用程序的可配置参数的文件的文件扩展名。也可以存储用于国际化和本地化的字符串，这种文件被称为属性资源包。</p><h3 id="1-2内容与格式"><a href="#1-2内容与格式" class="headerlink" title="1.2内容与格式"></a>1.2内容与格式</h3><ol><li>简单来说是类似map的键-值对存储方式，类型都是String字符串。</li><li>语法有以下几种：<ul><li>以#和！号作为一行中的第一个字符表示注释</li><li>反斜杠()用于转义</li><li>键=值表示</li></ul></li></ol><h2 id="2-适用场合？优缺点，有无可替代对比？"><a href="#2-适用场合？优缺点，有无可替代对比？" class="headerlink" title="2.适用场合？优缺点，有无可替代对比？"></a>2.适用场合？优缺点，有无可替代对比？</h2><blockquote><p>java下常见的几种配置文件格式(在下资历少，只说三种)，其排序。<br>适合人类编写：properties &gt; yaml &gt; xml<br>可以存储数据的复杂度： xml &gt; yaml &gt; properties</p></blockquote><ol><li>.properties的优点怕是只有简单这一说法了，缺点就是因为其简单，所以不支持层级关系，而且其文件的编码是ISO-8859-1，又称Latin-1，导致没法加载中文。</li><li>xml: 从排序来看，xml是层次结构的，存储内容复杂，但是就拥有了强大的表达能力。缺点分析起来复杂，对人类不太友好，不易阅读，所以一般不是用来让人写的，而是机器间的自我生成和解析，比如javafx图形界面生成的xml文档。</li><li>yaml：替代xml。<blockquote><p><code>比xml好的地方有</code>：</p><ul><li>yaml可读性好</li><li>yaml和脚本语言的交互性好</li><li>yaml的语法和高级语言类似，进行简单表达</li><li>yaml有一个一致性的类型信息模型</li><li>yaml易于实现<br><code>yaml与xml相同的</code>：</li><li>yaml可以基于流来处理；</li><li>yaml表达能力强，存储的数据复杂度也高。</li></ul></blockquote></li></ol><h3 id="综上所述："><a href="#综上所述：" class="headerlink" title="综上所述："></a>综上所述：</h3><p><strong>YAML 是以数据为设计语言的重点的，而不是像 XML 以标记为重点。实事上，正是因为这样一种设计理念使得 YAML 在后来的不少应用中取代XML，成为一种可读性高，易于表达数据序列的编程语言。YAML 和 XML也许只是有其不同的应用场景和使用范围。公认的是，yaml凭借易读性成为xml的对手。</strong></p><blockquote><p>properties可以用于简单的几乎不会变动的配置，如果是一些要经常改动的业务就可以使用yaml类配置</p></blockquote><h2 id="3-怎么用？"><a href="#3-怎么用？" class="headerlink" title="3.怎么用？"></a>3.怎么用？</h2><p><strong>下文的配置文件路径的具体表示点击</strong><a href="/2018/03/25/pro-path/index.html">跳转链接</a></p><p><img src="/images/properties.png" alt="这是我的项目结构"><br>先声明下全局变量<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String basePath = <span class="string">"src/properties/prop.properties"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String name = <span class="string">""</span>;</span><br></pre></td></tr></table></figure></p><h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><p>使用java.util.Properties类的load(InputStream)方法加载properties文件</p><blockquote><p>注意：这里的basepath是src目录开始的路径</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">try</span> (InputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(</span><br><span class="line">             <span class="keyword">new</span> File(basePath))))&#123;</span><br><span class="line">         Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">         pro.load(in);</span><br><span class="line">         name = pro.getProperty(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>  name;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><p>使用java.util.ResourceBundle类的getBudle()方法</p><blockquote><p>注意：这个getBundle()方法的参数只能写成包路径+properties文件名，否则将抛异常,并且路径是使用用src下的包名(不包括src)+文件名的方式 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">()</span></span>&#123;</span><br><span class="line">     ResourceBundle rb = ResourceBundle.getBundle(<span class="string">"properties/test/kkk/kkk"</span>);</span><br><span class="line">     name = rb.getString(<span class="string">"name"</span>);</span><br><span class="line">     <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><p>使用java.util.PropertyResourceBudle类的构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">try</span> (InputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(basePath))) &#123;</span><br><span class="line">         ResourceBundle rb = <span class="keyword">new</span> PropertyResourceBundle(in);</span><br><span class="line">         name = rb.getString(<span class="string">"name"</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h3><p>使用class变量的getResourceAsStream()方法注意：getResourceAsStream()方法的参数按格式写到包路径+properties文件名+.后缀</p><blockquote><p>注意：路径使用的是相对路径</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">     <span class="keyword">try</span> (InputStream in = TestProperUtil.class</span><br><span class="line">             .getResourceAsStream(<span class="string">"../../src.properties"</span>))&#123;</span><br><span class="line">         p.load(in);</span><br><span class="line">         name = p.getProperty(<span class="string">"name"</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-5"><a href="#3-5" class="headerlink" title="3.5"></a>3.5</h3><p>使用class.getClassLoader()所得到的java.lang.ClassLoader的getResourceAsStream()方法getResourceAsStream(name)方法的参数必须是包路径+文件名+.后缀否则会报空指针异常</p><blockquote><p>路径名和3.2一样</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> (InputStream in = TestProperUtil.class.getClassLoader()</span><br><span class="line">             .getResourceAsStream(<span class="string">"zzz/zzz.properties"</span>))&#123;</span><br><span class="line">         Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">         p.load(in);</span><br><span class="line">         name = p.getProperty(<span class="string">"name"</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-6"><a href="#3-6" class="headerlink" title="3.6"></a>3.6</h3><p>使用java.lang.ClassLoader类的getSystemResourceAsStream()静态方法getSystemResourceAsStream()方法的参数格式也是有固定要求的</p><blockquote><p>注意： 路径名和3.2一样的表示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> (InputStream in = ClassLoader</span><br><span class="line">             .getSystemResourceAsStream(<span class="string">"src.properties"</span>))&#123;</span><br><span class="line">         Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">         pro.load(in);</span><br><span class="line">         name = pro.getProperty(<span class="string">"name"</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-是什么？&quot;&gt;&lt;a href=&quot;#1-是什么？&quot; class=&quot;headerlink&quot; title=&quot;1.是什么？&quot;&gt;&lt;/a&gt;1.是什么？&lt;/h2&gt;&lt;h3 id=&quot;1-1定义&quot;&gt;&lt;a href=&quot;#1-1定义&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="配置文件" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>HexoMarkdown</title>
    <link href="http://yoursite.com/2018/03/22/WriteTest/"/>
    <id>http://yoursite.com/2018/03/22/WriteTest/</id>
    <published>2018-03-22T15:17:08.000Z</published>
    <updated>2018-03-24T02:19:54.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言：HexoMd-的语法，基本够用，欢迎补充-能用得到的-与修正，部分细节有待修改（基于主题BlueLake"><a href="#引言：HexoMd-的语法，基本够用，欢迎补充-能用得到的-与修正，部分细节有待修改（基于主题BlueLake" class="headerlink" title="引言：HexoMd 的语法，基本够用，欢迎补充(能用得到的)与修正，部分细节有待修改（基于主题BlueLake)"></a>引言：HexoMd 的语法，基本够用，欢迎补充(能用得到的)与修正，部分细节有待修改（基于主题BlueLake)</h2><p>Markdown 语法版本很多，不同地方部分语法不相兼容，导致网上部分语法不能再hexo上使用，以下是整理的能在hexo的部分语法。</p><hr><h2 id="1-Tab"><a href="#1-Tab" class="headerlink" title="1.Tab"></a>1.Tab</h2><pre><code>字前tab会加灰框</code></pre><h2 id="2-的用法"><a href="#2-的用法" class="headerlink" title="2.#的用法"></a>2.#的用法</h2><pre><code>用来表示几级标题# frist title## second title### third title</code></pre><h2 id="3-超链接"><a href="#3-超链接" class="headerlink" title="3.超链接"></a>3.超链接</h2><h3 id="3-1显示链接的图片"><a href="#3-1显示链接的图片" class="headerlink" title="3.1显示链接的图片"></a>3.1显示链接的图片</h3><pre><code>![name](url) 显示链接的图片![this is page](/images/keduoli.jpg)</code></pre><p>link:<br><img src="/images/keduoli.jpg" alt="this is page"></p><h3 id="3-2文字超链接"><a href="#3-2文字超链接" class="headerlink" title="3.2文字超链接"></a>3.2文字超链接</h3><pre><code>[name](url) 文字超链接[bilibili](https://www.bilibili.com/)</code></pre><p><a href="https://www.bilibili.com/" target="_blank" rel="noopener">bilibili</a></p><h3 id="3-3图片超链接"><a href="#3-3图片超链接" class="headerlink" title="3.3图片超链接"></a>3.3图片超链接</h3><pre><code>[![xxx](图片url)][要转移到的链接]图片超链接[![enene](/images/keduoli.jpg)](https://nodesource.com/products/nsolid)</code></pre><p><a href="https://nodesource.com/products/nsolid" target="_blank" rel="noopener"><img src="/images/keduoli.jpg" alt="enene"></a></p><h2 id="4-列表"><a href="#4-列表" class="headerlink" title="4.列表"></a>4.列表</h2><h3 id="4-1-1无序列表-，-，-，-两格缩进，列表与前一行的"><a href="#4-1-1无序列表-，-，-，-两格缩进，列表与前一行的" class="headerlink" title="4.1.1无序列表 -，*，+， 两格缩进，列表与前一行的"></a>4.1.1无序列表 -，*，+， 两格缩进，列表与前一行的</h3><pre><code>hello:      - one      - two      - three</code></pre><p>eg:</p><p>hello (没有衔接一起很神奇）</p><ul><li>one</li><li>two</li><li>three</li></ul><p>food</p><ul><li>bread<ul><li>apple<ul><li>pig<ul><li>ddd<ul><li>mmm</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="4-1-2两格缩进-（衔接在一起了）"><a href="#4-1-2两格缩进-（衔接在一起了）" class="headerlink" title="4.1.2两格缩进  （衔接在一起了）"></a>4.1.2两格缩进  （衔接在一起了）</h3><ol><li>登录微博开放平台，选择。</li><li>为了与注意风格统一，如下配置</li><li>嗯嗯嗯          （也衔接一起了）</li></ol><ul><li>基础设置： dsfs<ul><li>样式设置： sdfa</li><li>模块设置： dsfa</li></ul></li></ul><hr><h3 id="4-2有序列表-序号-xxx-注意有空格）"><a href="#4-2有序列表-序号-xxx-注意有空格）" class="headerlink" title="4.2有序列表 序号. xxx(注意有空格）"></a>4.2有序列表 序号. xxx(注意有空格）</h3><ol><li>登录微博开放平台，选择。</li><li>为了与注意风格统一，如下配置</li><li>嗯嗯嗯 </li></ol><h2 id="5-用键代替链接，键值对匹配"><a href="#5-用键代替链接，键值对匹配" class="headerlink" title="5.用键代替链接，键值对匹配"></a>5.用键代替链接，键值对匹配</h2><pre><code>关键字对上跳转的意思吧，[内容]和文章最后的[内容1](链接)对上可以变成超链接，前后内容忽略大小写，也能匹配。这里注意最后一个，如果最后几个字也要跳转，单单加[1]没用得再加[2]来达到目的，此时内容为1，但是跳转到的目的为2Markdown is a lightweight markup language based on theformatting conventions that people naturally use in email.  As [John Gruber] writes on the [Markdown site]</code></pre><p>Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email.As <a href="http://daringfireball.net" target="_blank" rel="noopener">John Gruber</a> writes on the <a href="https://github.com/joemccann/dillinger" target="_blank" rel="noopener">Markdown site</a></p><h2 id="6-可以用来注意，引用-可以多层"><a href="#6-可以用来注意，引用-可以多层" class="headerlink" title="6.可以用来注意，引用,可以多层"></a>6.可以用来注意，引用,可以多层</h2><pre><code>&gt; The overriding design goal for Markdown&apos;s&gt;&gt; formatting syntax is to make it as readable&gt; as possible. The idea is that.</code></pre><p>eg:</p><blockquote><p>The overriding design goal for Markdown’s</p><blockquote><p>formatting syntax is to make it as readable<br>as possible. The idea is that.</p></blockquote></blockquote><h2 id="7-代码块"><a href="#7-代码块" class="headerlink" title="7.代码块"></a>7.代码块</h2><pre><code>代码表示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> dillinger</span><br><span class="line">$ npm install -d</span><br><span class="line">$ node app</span><br></pre></td></tr></table></figure></code></pre><p>eg:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> dillinger</span><br><span class="line">$ npm install -d</span><br><span class="line">$ node app</span><br></pre></td></tr></table></figure></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args)&#123;</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"I think it's good"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-表格"><a href="#8-表格" class="headerlink" title="8.表格"></a>8.表格</h2><pre><code>制表第一行和第二行列必须对应数量相等| Plugin | README | sdflj || ------ | ：------： | -----： |  右对齐，居中，左对齐| Dropbox | [plugins/dropbox/README.md][PlDb] | dsf || Github | [plugins/github/README.md][PlGh] | sdf || Google Drive | [plugins/googledrive/README.md][PlGd] | dsfs || OneDrive | [plugins/onedrive/README.md][PlOd] | dsfj || Medium | [plugins/medium/README.md][PlMe] || Google Analytics | [plugins/googleanalytics/README.md][PlGa] |</code></pre><p>eg:</p><table><thead><tr><th>Plugin</th><th>README</th><th>sdflj</th></tr></thead><tbody><tr><td>Dropbox</td><td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/dropbox/README.md" target="_blank" rel="noopener">plugins/dropbox/README.md</a></td><td>dsf</td></tr><tr><td>Github</td><td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/github/README.md" target="_blank" rel="noopener">plugins/github/README.md</a></td><td>sdf</td></tr><tr><td>Google Drive</td><td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/googledrive/README.md" target="_blank" rel="noopener">plugins/googledrive/README.md</a></td><td>dsfs</td></tr><tr><td>OneDrive</td><td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/onedrive/README.md" target="_blank" rel="noopener">plugins/onedrive/README.md</a></td><td>dsfj</td></tr><tr><td>Medium</td><td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/medium/README.md" target="_blank" rel="noopener">plugins/medium/README.md</a></td><td>df</td></tr><tr><td>Google Analytics</td><td><a href="https://github.com/RahulHP/dillinger/blob/master/plugins/googleanalytics/README.md" target="_blank" rel="noopener">plugins/googleanalytics/README.md</a></td><td>dsdg</td></tr></tbody></table><p>eg：<br>This will create the dillinger image and pull in the necessary dependencies. Be sure to swap out <code>${package.json.version}</code> with the actual version of Dillinger.</p><h2 id="9-文字"><a href="#9-文字" class="headerlink" title="9.文字"></a>9.文字</h2><h3 id="9-1文字背景"><a href="#9-1文字背景" class="headerlink" title="9.1文字背景"></a>9.1文字背景</h3><pre><code>`xxx` 背景颜色加灰I love `you` red line</code></pre><p>eg:<br>I love <code>you</code> red line</p><h3 id="9-2文字加粗"><a href="#9-2文字加粗" class="headerlink" title="9.2文字加粗"></a>9.2文字加粗</h3><pre><code>加粗 **Software**</code></pre><p>Free <strong>Software</strong>, Hell Yeah!</p><h3 id="9-3删除线"><a href="#9-3删除线" class="headerlink" title="9.3删除线"></a>9.3删除线</h3><pre><code>~~xxx~~</code></pre><p>我喜欢<del>java</del>python</p><h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h2><pre><code>附录：[dill]: &lt;https://github.com/joemccann/dillinger&gt;[git-repo-url]: &lt;https://github.com/joemccann/dillinger.git&gt;[john gruber]: &lt;http://daringfireball.net&gt;[df1]: &lt;http://daringfireball.net/projects/markdown/&gt;[PlMe]: &lt;https://github.com/joemccann/dillinger/tree/master/plugins/medium/README.md&gt;[PlGa]: &lt;https://github.com/RahulHP/dillinger/blob/master/plugins/googleanalytics/README.md&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言：HexoMd-的语法，基本够用，欢迎补充-能用得到的-与修正，部分细节有待修改（基于主题BlueLake&quot;&gt;&lt;a href=&quot;#引言：HexoMd-的语法，基本够用，欢迎补充-能用得到的-与修正，部分细节有待修改（基于主题BlueLake&quot; class=&quot;h
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/22/hello-world/"/>
    <id>http://yoursite.com/2018/03/22/hello-world/</id>
    <published>2018-03-22T09:34:27.055Z</published>
    <updated>2018-03-22T09:34:27.056Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
